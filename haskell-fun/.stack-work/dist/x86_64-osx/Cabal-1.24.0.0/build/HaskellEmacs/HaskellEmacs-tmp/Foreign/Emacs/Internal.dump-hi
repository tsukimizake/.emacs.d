
==================== FINAL INTERFACE ====================
2016-10-01 05:41:13.917538 UTC

interface main@main:Foreign.Emacs.Internal 8001
  interface hash: e34d045c65f68c3df74df68bcf8a38c4
  ABI hash: d81b1c10e5c14bd59d5c5174a1fc449d
  export-list hash: 5ae1a49a6133df1ada5872615f01ac05
  orphan hash: f8dd1089c0ca45a0fc334c833b02d281
  flag hash: cc53837b8c1fd31470063b140b679df6
  sig of: Nothing
  used TH splices: False
  where
exports:
  Foreign.Emacs.Internal.eval
  Foreign.Emacs.Internal.eval_
  Foreign.Emacs.Internal.getBuffer
  Foreign.Emacs.Internal.modifyBuffer
  Foreign.Emacs.Internal.putBuffer
  Foreign.Emacs.Internal.Buffer{Foreign.Emacs.Internal.Buffer point text}
  Foreign.Emacs.Internal.Emacs{Foreign.Emacs.Internal.EmacsInternal fromEmacs}
  Foreign.Emacs.Internal.ToEmacs{Foreign.Emacs.Internal.toEmacs}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1
                      atto-lisp-0.2.2.2@atto-lisp-0.2.2.2-pADZfkG2vxA8PuvQIBBrO
                      attoparsec-0.13.0.2@attoparsec-0.13.0.2-GLM6q4XQBSiI4fJOXoBxlu
                      base-4.9.0.0 binary-0.8.3.0@binary-0.8.3.0
                      blaze-builder-0.4.0.2@blaze-builder-0.4.0.2-KWDLbdBYSBoALiMW0LHIz1
                      blaze-textual-0.2.1.0@blaze-textual-0.2.1.0-5TvXaG25I6S46sBk67LFXf
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      scientific-0.3.4.9@scientific-0.3.4.9-6oTYuCcx6H5BsTGU7D2Gk3
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      transformers-0.5.2.0@transformers-0.5.2.0
                      utf8-string-1.0.1.1@utf8-string-1.0.1.1-2T8mBCuEDlXDo8zed8Onw4
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
orphans: attoparsec-0.13.0.2@attoparsec-0.13.0.2-GLM6q4XQBSiI4fJOXoBxlu:Data.Attoparsec.ByteString.Char8
         base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G:Data.Hashable.Generic
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
family instance modules: attoparsec-0.13.0.2@attoparsec-0.13.0.2-GLM6q4XQBSiI4fJOXoBxlu:Data.Attoparsec.Internal.Types
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Functor.Identity base-4.9.0.0:Data.List.NonEmpty
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Semigroup
                         base-4.9.0.0:Data.Type.Equality base-4.9.0.0:Data.Version
                         base-4.9.0.0:Data.Void base-4.9.0.0:GHC.Exts
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
import  -/  atto-lisp-0.2.2.2@atto-lisp-0.2.2.2-pADZfkG2vxA8PuvQIBBrO:Data.AttoLisp c08cb10972d1d412f22ccb4fe3eb3e1b
import  -/  base-4.9.0.0:Control.Applicative 7728b33d6969dce59e89474349eb1397
import  -/  base-4.9.0.0:Control.Concurrent 98a3a12a2ace3d27758947d9f1041f90
import  -/  base-4.9.0.0:Control.Concurrent.Chan d55a50c16a7726146797e8faa62a516b
import  -/  base-4.9.0.0:Control.Monad.IO.Class d702028d883e700bd7066b031147030d
import  -/  base-4.9.0.0:Data.Either bd9f099b82d4ed2d98c56d7144ac6957
import  -/  base-4.9.0.0:Data.Monoid 1efae021212a10c79fd75960dc0a1d99
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.0.0:GHC.MVar 5a1706a0bf7a7186672dad8d28229b31
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Real 08bf4acb5f2508f89d6fbcd57fe232e9
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Lazy.Char8 22406b4bf44ab096084a9ba406db8a02
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Lazy.Internal f0df474bf1747957504b03d816c8df3d
import  -/  deepseq-1.4.2.0@deepseq-1.4.2.0:Control.DeepSeq 83a010dd8fe5efccb121b234f5c2bfe7
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Trans 0a058c68d8234a5f23a0f2e61a261faf
import  -/  text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text 06bfc520ebad6c2c261cbf7b5fcc4e7e
import  -/  text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Internal 530216acfbfab25df053b0caac6d6a57
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Reader e4096b104cf1a0df8752e81669ef6a24
import  -/  utf8-string-1.0.1.1@utf8-string-1.0.1.1-2T8mBCuEDlXDo8zed8Onw4:Data.ByteString.Lazy.UTF8 38a240153e519ba482bee57124b624d8
3ea21ebf8898c3f9d10265d33d055302
  $fApplicativeEmacs ::
    GHC.Base.Applicative Foreign.Emacs.Internal.Emacs
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.Emacs.Internal.Emacs
                  Foreign.Emacs.Internal.$fFunctorEmacs
                  Foreign.Emacs.Internal.$fApplicativeEmacs_$cpure
                  Foreign.Emacs.Internal.$fApplicativeEmacs_$c<*>
                  Foreign.Emacs.Internal.$fApplicativeEmacs_$c*>
                  Foreign.Emacs.Internal.$fApplicativeEmacs_$c<* -}
1b2a80ba068f049394ad867c5c1a99c8
  $fApplicativeEmacs1 ::
    Control.Monad.Trans.Reader.ReaderT
      (GHC.MVar.MVar Data.AttoLisp.Lisp,
       Control.Concurrent.Chan.Chan
         Data.ByteString.Lazy.Internal.ByteString)
      GHC.Types.IO
      a
    -> Control.Monad.Trans.Reader.ReaderT
         (GHC.MVar.MVar Data.AttoLisp.Lisp,
          Control.Concurrent.Chan.Chan
            Data.ByteString.Lazy.Internal.ByteString)
         GHC.Types.IO
         b
    -> (GHC.MVar.MVar Data.AttoLisp.Lisp,
        Control.Concurrent.Chan.Chan
          Data.ByteString.Lazy.Internal.ByteString)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,U)))><L,1*C1(C1(U(U,A)))><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (eta :: Control.Monad.Trans.Reader.ReaderT
                             (GHC.MVar.MVar Data.AttoLisp.Lisp,
                              Control.Concurrent.Chan.Chan
                                Data.ByteString.Lazy.Internal.ByteString)
                             GHC.Types.IO
                             a)
                   (eta1 :: Control.Monad.Trans.Reader.ReaderT
                              (GHC.MVar.MVar Data.AttoLisp.Lisp,
                               Control.Concurrent.Chan.Chan
                                 Data.ByteString.Lazy.Internal.ByteString)
                              GHC.Types.IO
                              b)
                   (eta2 :: (GHC.MVar.MVar Data.AttoLisp.Lisp,
                             Control.Concurrent.Chan.Chan
                               Data.ByteString.Lazy.Internal.ByteString))
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case (eta
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <(GHC.MVar.MVar Data.AttoLisp.Lisp,
                              Control.Concurrent.Chan.Chan
                                Data.ByteString.Lazy.Internal.ByteString)>_R
                            <GHC.Types.IO>_R
                            <a>_N)
                         eta2)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        eta3 of ds { (#,#) ipv ipv1 ->
                 case (eta1
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <(GHC.MVar.MVar Data.AttoLisp.Lisp,
                              Control.Concurrent.Chan.Chan
                                Data.ByteString.Lazy.Internal.ByteString)>_R
                            <GHC.Types.IO>_R
                            <b>_N)
                         eta2)
                        `cast`
                      (GHC.Types.N:IO[0] <b>_R)
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 (# ipv2, ipv1 #) } }) -}
a1f0eae5f65f38e1de8c5132abee0094
  $fApplicativeEmacs2 ::
    Control.Monad.Trans.Reader.ReaderT
      (GHC.MVar.MVar Data.AttoLisp.Lisp,
       Control.Concurrent.Chan.Chan
         Data.ByteString.Lazy.Internal.ByteString)
      GHC.Types.IO
      a
    -> Control.Monad.Trans.Reader.ReaderT
         (GHC.MVar.MVar Data.AttoLisp.Lisp,
          Control.Concurrent.Chan.Chan
            Data.ByteString.Lazy.Internal.ByteString)
         GHC.Types.IO
         b
    -> (GHC.MVar.MVar Data.AttoLisp.Lisp,
        Control.Concurrent.Chan.Chan
          Data.ByteString.Lazy.Internal.ByteString)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,A)))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (eta :: Control.Monad.Trans.Reader.ReaderT
                             (GHC.MVar.MVar Data.AttoLisp.Lisp,
                              Control.Concurrent.Chan.Chan
                                Data.ByteString.Lazy.Internal.ByteString)
                             GHC.Types.IO
                             a)
                   (eta1 :: Control.Monad.Trans.Reader.ReaderT
                              (GHC.MVar.MVar Data.AttoLisp.Lisp,
                               Control.Concurrent.Chan.Chan
                                 Data.ByteString.Lazy.Internal.ByteString)
                              GHC.Types.IO
                              b)
                   (eta2 :: (GHC.MVar.MVar Data.AttoLisp.Lisp,
                             Control.Concurrent.Chan.Chan
                               Data.ByteString.Lazy.Internal.ByteString))
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case (eta
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <(GHC.MVar.MVar Data.AttoLisp.Lisp,
                              Control.Concurrent.Chan.Chan
                                Data.ByteString.Lazy.Internal.ByteString)>_R
                            <GHC.Types.IO>_R
                            <a>_N)
                         eta2)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        eta3 of ds { (#,#) ipv ipv1 ->
                 (eta1
                    `cast`
                  (Control.Monad.Trans.Reader.N:ReaderT[0]
                       <*>_N
                       <(GHC.MVar.MVar Data.AttoLisp.Lisp,
                         Control.Concurrent.Chan.Chan
                           Data.ByteString.Lazy.Internal.ByteString)>_R
                       <GHC.Types.IO>_R
                       <b>_N)
                    eta2)
                   `cast`
                 (GHC.Types.N:IO[0] <b>_R)
                   ipv }) -}
7f8671c54ba195e5a3346576602365fd
  $fApplicativeEmacs3 ::
    a
    -> (GHC.MVar.MVar Data.AttoLisp.Lisp,
        Control.Concurrent.Chan.Chan
          Data.ByteString.Lazy.Internal.ByteString)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,U>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (eta :: a)
                   (eta1 :: (GHC.MVar.MVar Data.AttoLisp.Lisp,
                             Control.Concurrent.Chan.Chan
                               Data.ByteString.Lazy.Internal.ByteString))
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta2, eta #)) -}
3ea21ebf8898c3f9d10265d33d055302
  $fApplicativeEmacs_$c*> ::
    Foreign.Emacs.Internal.Emacs a
    -> Foreign.Emacs.Internal.Emacs b -> Foreign.Emacs.Internal.Emacs b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,A)))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Foreign.Emacs.Internal.$fApplicativeEmacs2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Foreign.Emacs.Internal.N:Emacs[0]) <a>_N
                 ->_R Sym (Foreign.Emacs.Internal.N:Emacs[0]) <b>_N
                 ->_R Trans
                          (<(GHC.MVar.MVar Data.AttoLisp.Lisp,
                             Control.Concurrent.Chan.Chan
                               Data.ByteString.Lazy.Internal.ByteString)>_R
                           ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <(GHC.MVar.MVar Data.AttoLisp.Lisp,
                                           Control.Concurrent.Chan.Chan
                                             Data.ByteString.Lazy.Internal.ByteString)>_R
                                         <GHC.Types.IO>_R
                                         <b>_N))
                               (Sym (Foreign.Emacs.Internal.N:Emacs[0]) <b>_N))) -}
3ea21ebf8898c3f9d10265d33d055302
  $fApplicativeEmacs_$c<* ::
    Foreign.Emacs.Internal.Emacs a
    -> Foreign.Emacs.Internal.Emacs b -> Foreign.Emacs.Internal.Emacs a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,U)))><L,1*C1(C1(U(U,A)))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Foreign.Emacs.Internal.$fApplicativeEmacs1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Foreign.Emacs.Internal.N:Emacs[0]) <a>_N
                 ->_R Sym (Foreign.Emacs.Internal.N:Emacs[0]) <b>_N
                 ->_R Trans
                          (<(GHC.MVar.MVar Data.AttoLisp.Lisp,
                             Control.Concurrent.Chan.Chan
                               Data.ByteString.Lazy.Internal.ByteString)>_R
                           ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <(GHC.MVar.MVar Data.AttoLisp.Lisp,
                                           Control.Concurrent.Chan.Chan
                                             Data.ByteString.Lazy.Internal.ByteString)>_R
                                         <GHC.Types.IO>_R
                                         <a>_N))
                               (Sym (Foreign.Emacs.Internal.N:Emacs[0]) <a>_N))) -}
3ea21ebf8898c3f9d10265d33d055302
  $fApplicativeEmacs_$c<*> ::
    Foreign.Emacs.Internal.Emacs (a -> b)
    -> Foreign.Emacs.Internal.Emacs a -> Foreign.Emacs.Internal.Emacs b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,1*C1(U))))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                (Foreign.Emacs.Internal.$fApplicativeEmacs_$s$fApplicativeReaderT_$c<*>
                   @ (GHC.MVar.MVar Data.AttoLisp.Lisp,
                      Control.Concurrent.Chan.Chan
                        Data.ByteString.Lazy.Internal.ByteString))
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Foreign.Emacs.Internal.N:Emacs[0]) <a -> b>_N
                 ->_R Sym (Foreign.Emacs.Internal.N:Emacs[0]) <a>_N
                 ->_R Sym (Foreign.Emacs.Internal.N:Emacs[0]) <b>_N) -}
3ea21ebf8898c3f9d10265d33d055302
  $fApplicativeEmacs_$cpure :: a -> Foreign.Emacs.Internal.Emacs a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Foreign.Emacs.Internal.$fApplicativeEmacs3
                  `cast`
                (forall (a :: <*>_N).
                 <a>_R
                 ->_R Trans
                          (<(GHC.MVar.MVar Data.AttoLisp.Lisp,
                             Control.Concurrent.Chan.Chan
                               Data.ByteString.Lazy.Internal.ByteString)>_R
                           ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <(GHC.MVar.MVar Data.AttoLisp.Lisp,
                                           Control.Concurrent.Chan.Chan
                                             Data.ByteString.Lazy.Internal.ByteString)>_R
                                         <GHC.Types.IO>_R
                                         <a>_N))
                               (Sym (Foreign.Emacs.Internal.N:Emacs[0]) <a>_N))) -}
22f0b85348a9d0eb49e7ee51f35f440a
  $fApplicativeEmacs_$s$fApplicativeReaderT_$c<*> ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,1*C1(U))))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (f :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b))
                   (v :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r -> GHC.Types.IO b)
                   @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (\ (tpl :: r -> GHC.Types.IO b) -> tpl)
                     `cast`
                   (<r -> GHC.Types.IO b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N <r>_R <GHC.Types.IO>_R <b>_N))
                   (\ (r1 :: r) ->
                    GHC.Base.$fApplicativeIO_$sap
                      @ a
                      @ b
                      (Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ GHC.Types.IO
                         @ (a -> b)
                         f
                         r1)
                      (Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ GHC.Types.IO
                         @ a
                         v
                         r1))) -}
3ea21ebf8898c3f9d10265d33d055302
  $fFunctorEmacs :: GHC.Base.Functor Foreign.Emacs.Internal.Emacs
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.Emacs.Internal.Emacs
                  Foreign.Emacs.Internal.$fFunctorEmacs_$cfmap
                  Foreign.Emacs.Internal.$fFunctorEmacs_$c<$ -}
3e75b189e175f9b361d31335de676d67
  $fFunctorEmacs1 ::
    a
    -> Control.Monad.Trans.Reader.ReaderT
         (GHC.MVar.MVar Data.AttoLisp.Lisp,
          Control.Concurrent.Chan.Chan
            Data.ByteString.Lazy.Internal.ByteString)
         GHC.Types.IO
         b
    -> (GHC.MVar.MVar Data.AttoLisp.Lisp,
        Control.Concurrent.Chan.Chan
          Data.ByteString.Lazy.Internal.ByteString)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><C(C(S(SL))),1*C1(C1(U(U,A)))><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (eta :: a)
                   (eta1 :: Control.Monad.Trans.Reader.ReaderT
                              (GHC.MVar.MVar Data.AttoLisp.Lisp,
                               Control.Concurrent.Chan.Chan
                                 Data.ByteString.Lazy.Internal.ByteString)
                              GHC.Types.IO
                              b)
                   (eta2 :: (GHC.MVar.MVar Data.AttoLisp.Lisp,
                             Control.Concurrent.Chan.Chan
                               Data.ByteString.Lazy.Internal.ByteString))
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case (eta1
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <(GHC.MVar.MVar Data.AttoLisp.Lisp,
                              Control.Concurrent.Chan.Chan
                                Data.ByteString.Lazy.Internal.ByteString)>_R
                            <GHC.Types.IO>_R
                            <b>_N)
                         eta2)
                        `cast`
                      (GHC.Types.N:IO[0] <b>_R)
                        eta3 of ds { (#,#) ipv ipv1 ->
                 (# ipv, eta #) }) -}
3ea21ebf8898c3f9d10265d33d055302
  $fFunctorEmacs_$c<$ ::
    a
    -> Foreign.Emacs.Internal.Emacs b -> Foreign.Emacs.Internal.Emacs a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><C(C(S(SL))),1*C1(C1(U(U,A)))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Foreign.Emacs.Internal.$fFunctorEmacs1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <a>_R
                 ->_R Sym (Foreign.Emacs.Internal.N:Emacs[0]) <b>_N
                 ->_R Trans
                          (<(GHC.MVar.MVar Data.AttoLisp.Lisp,
                             Control.Concurrent.Chan.Chan
                               Data.ByteString.Lazy.Internal.ByteString)>_R
                           ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <(GHC.MVar.MVar Data.AttoLisp.Lisp,
                                           Control.Concurrent.Chan.Chan
                                             Data.ByteString.Lazy.Internal.ByteString)>_R
                                         <GHC.Types.IO>_R
                                         <a>_N))
                               (Sym (Foreign.Emacs.Internal.N:Emacs[0]) <a>_N))) -}
3ea21ebf8898c3f9d10265d33d055302
  $fFunctorEmacs_$cfmap ::
    (a -> b)
    -> Foreign.Emacs.Internal.Emacs a -> Foreign.Emacs.Internal.Emacs b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(C(S(SL))),1*C1(C1(U(U,U)))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                (Foreign.Emacs.Internal.$fFunctorEmacs_$s$fFunctorReaderT_$cfmap
                   @ (GHC.MVar.MVar Data.AttoLisp.Lisp,
                      Control.Concurrent.Chan.Chan
                        Data.ByteString.Lazy.Internal.ByteString))
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <a -> b>_R
                 ->_R Sym (Foreign.Emacs.Internal.N:Emacs[0]) <a>_N
                 ->_R Sym (Foreign.Emacs.Internal.N:Emacs[0]) <b>_N) -}
5a0b8a66616e6b7486592adcacca8908
  $fFunctorEmacs_$s$fFunctorReaderT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(C(S(SL))),1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r
                   @ a
                   @ b
                   (f :: a -> b)
                   (eta :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (eta1 :: r) ->
                 (GHC.Base.$
                    @ 'GHC.Types.PtrRepLifted
                    @ (r -> GHC.Types.IO b)
                    @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                    (\ (tpl :: r -> GHC.Types.IO b) -> tpl)
                      `cast`
                    (<r -> GHC.Types.IO b>_R
                     ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N <r>_R <GHC.Types.IO>_R <b>_N))
                    (let {
                       g :: r -> GHC.Types.IO a
                       = Control.Monad.Trans.Reader.runReaderT
                           @ r
                           @ *
                           @ GHC.Types.IO
                           @ a
                           eta
                     } in
                     (\ (x :: r)
                        (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                      (GHC.Base.$fFunctorIO_$cfmap @ a @ b f (g x))
                        `cast`
                      (GHC.Types.N:IO[0] <b>_R)
                        eta2)
                       `cast`
                     (<r>_R ->_R Sym (GHC.Types.N:IO[0] <b>_R))))
                   `cast`
                 (Control.Monad.Trans.Reader.N:ReaderT[0]
                      <*>_N <r>_R <GHC.Types.IO>_R <b>_N)
                   eta1)
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <a -> b>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N <r>_R <GHC.Types.IO>_R <b>_N)) -}
3ea21ebf8898c3f9d10265d33d055302
  $fMonadEmacs :: GHC.Base.Monad Foreign.Emacs.Internal.Emacs
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.Emacs.Internal.Emacs
                  Foreign.Emacs.Internal.$fApplicativeEmacs
                  Foreign.Emacs.Internal.$fMonadEmacs_$c>>=
                  Foreign.Emacs.Internal.$fMonadEmacs_$c>>
                  Foreign.Emacs.Internal.$fApplicativeEmacs_$cpure
                  Foreign.Emacs.Internal.$fMonadEmacs_$cfail -}
3ea21ebf8898c3f9d10265d33d055302
  $fMonadEmacs_$c>> ::
    Foreign.Emacs.Internal.Emacs a
    -> Foreign.Emacs.Internal.Emacs b -> Foreign.Emacs.Internal.Emacs b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,A)))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                (Foreign.Emacs.Internal.$fMonadEmacs_$s$fMonadReaderT_$c>>
                   @ (GHC.MVar.MVar Data.AttoLisp.Lisp,
                      Control.Concurrent.Chan.Chan
                        Data.ByteString.Lazy.Internal.ByteString))
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Foreign.Emacs.Internal.N:Emacs[0]) <a>_N
                 ->_R Sym (Foreign.Emacs.Internal.N:Emacs[0]) <b>_N
                 ->_R Sym (Foreign.Emacs.Internal.N:Emacs[0]) <b>_N) -}
3ea21ebf8898c3f9d10265d33d055302
  $fMonadEmacs_$c>>= ::
    Foreign.Emacs.Internal.Emacs a
    -> (a -> Foreign.Emacs.Internal.Emacs b)
    -> Foreign.Emacs.Internal.Emacs b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,U)))><L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                (Foreign.Emacs.Internal.$fMonadEmacs_$s$fMonadReaderT_$c>>=
                   @ (GHC.MVar.MVar Data.AttoLisp.Lisp,
                      Control.Concurrent.Chan.Chan
                        Data.ByteString.Lazy.Internal.ByteString))
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 Sym (Foreign.Emacs.Internal.N:Emacs[0]) <a>_N
                 ->_R (<a>_R ->_R Sym (Foreign.Emacs.Internal.N:Emacs[0]) <b>_N)
                 ->_R Sym (Foreign.Emacs.Internal.N:Emacs[0]) <b>_N) -}
3ea21ebf8898c3f9d10265d33d055302
  $fMonadEmacs_$cfail ::
    GHC.Base.String -> Foreign.Emacs.Internal.Emacs a
  {- Arity: 3, Strictness: <B,U><B,A><B,U>x,
     Unfolding: InlineRule (0, True, True)
                (Foreign.Emacs.Internal.$fMonadEmacs_$s$fMonadReaderT_$cfail
                   @ (GHC.MVar.MVar Data.AttoLisp.Lisp,
                      Control.Concurrent.Chan.Chan
                        Data.ByteString.Lazy.Internal.ByteString))
                  `cast`
                (forall (a :: <*>_N).
                 <[GHC.Types.Char]>_R
                 ->_R Sym (Foreign.Emacs.Internal.N:Emacs[0]) <a>_N) -}
da98956e7b929b691b57ef0d32bc99d1
  $fMonadEmacs_$s$fMonadReaderT_$c>> ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,A)))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (k :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r -> GHC.Types.IO b)
                   @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (\ (tpl :: r -> GHC.Types.IO b) -> tpl)
                     `cast`
                   (<r -> GHC.Types.IO b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N <r>_R <GHC.Types.IO>_R <b>_N))
                   (\ (r1 :: r) ->
                    GHC.Base.bindIO
                      @ a
                      @ b
                      (Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ GHC.Types.IO
                         @ a
                         m1
                         r1)
                      (\ (a1 :: a) ->
                       Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ GHC.Types.IO
                         @ b
                         k
                         r1))) -}
2ed7d03fc71f120cd5ad77bb672e8056
  $fMonadEmacs_$s$fMonadReaderT_$c>>= ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> (a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,U)))><L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (k :: a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r -> GHC.Types.IO b)
                   @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (\ (tpl :: r -> GHC.Types.IO b) -> tpl)
                     `cast`
                   (<r -> GHC.Types.IO b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N <r>_R <GHC.Types.IO>_R <b>_N))
                   (\ (r1 :: r) ->
                    GHC.Base.bindIO
                      @ a
                      @ b
                      (Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ GHC.Types.IO
                         @ a
                         m1
                         r1)
                      (\ (a1 :: a) ->
                       Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ GHC.Types.IO
                         @ b
                         (k a1)
                         r1))) -}
ee61223be49f665fdb6a41f2e8a681b6
  $fMonadEmacs_$s$fMonadReaderT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
  {- Arity: 3, Strictness: <B,U><B,A><B,U>x,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a (msg :: GHC.Base.String) ->
                 let {
                   eta :: GHC.Types.IO a = GHC.Base.$fMonadIO_$cfail @ a msg
                 } in
                 (\ (eta1 :: r) -> GHC.Base.const @ (GHC.Types.IO a) @ r eta eta1)
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N <r>_R <GHC.Types.IO>_R <a>_N))) -}
3ea21ebf8898c3f9d10265d33d055302
  $fMonadIOEmacs ::
    Control.Monad.IO.Class.MonadIO Foreign.Emacs.Internal.Emacs
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.Emacs.Internal.Emacs
                  Foreign.Emacs.Internal.$fMonadEmacs
                  Foreign.Emacs.Internal.$fMonadIOEmacs_$cliftIO -}
46cdc75040be27e7a81fba51686adc65
  $fMonadIOEmacs1 ::
    GHC.Types.IO a
    -> (GHC.MVar.MVar Data.AttoLisp.Lisp,
        Control.Concurrent.Chan.Chan
          Data.ByteString.Lazy.Internal.ByteString)
    -> GHC.Types.IO a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   (eta :: GHC.Types.IO a)
                   (ds :: (GHC.MVar.MVar Data.AttoLisp.Lisp,
                           Control.Concurrent.Chan.Chan
                             Data.ByteString.Lazy.Internal.ByteString)) ->
                 eta) -}
3ea21ebf8898c3f9d10265d33d055302
  $fMonadIOEmacs_$cliftIO ::
    GHC.Types.IO a -> Foreign.Emacs.Internal.Emacs a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (0, True, True)
                Foreign.Emacs.Internal.$fMonadIOEmacs1
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Types.IO a>_R
                 ->_R Trans
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <(GHC.MVar.MVar Data.AttoLisp.Lisp,
                                      Control.Concurrent.Chan.Chan
                                        Data.ByteString.Lazy.Internal.ByteString)>_R
                                    <GHC.Types.IO>_R
                                    <a>_N))
                          (Sym (Foreign.Emacs.Internal.N:Emacs[0]) <a>_N)) -}
3ea21ebf8898c3f9d10265d33d055302
  $fNFDataEmacs ::
    Control.DeepSeq.NFData
      (Foreign.Emacs.Internal.Emacs Data.AttoLisp.Lisp)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Foreign.Emacs.Internal.$fNFDataEmacs_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Foreign.Emacs.Internal.Emacs Data.AttoLisp.Lisp>_N)) -}
3ea21ebf8898c3f9d10265d33d055302
  $fNFDataEmacs_$crnf ::
    Foreign.Emacs.Internal.Emacs Data.AttoLisp.Lisp -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Foreign.Emacs.Internal.Emacs Data.AttoLisp.Lisp) ->
                 GHC.Tuple.()) -}
9c943bae31741ab1c4437e85fa07e099
  $fToEmacsEmacs ::
    Data.AttoLisp.ToLisp a =>
    Foreign.Emacs.Internal.ToEmacs (Foreign.Emacs.Internal.Emacs a)
  DFunId
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><L,C(C1(U(U,U)))>m1,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Foreign.Emacs.Internal.$fToEmacsEmacs_$ctoEmacs
                  `cast`
                (forall (a :: <*>_N).
                 <Data.AttoLisp.ToLisp a>_R
                 ->_R Sym (Foreign.Emacs.Internal.N:ToEmacs[0]
                               <Foreign.Emacs.Internal.Emacs a>_N)) -}
33b4ce17cfc6b8d8a23cfa8711fc0442
  $fToEmacsEmacs_$ctoEmacs ::
    Data.AttoLisp.ToLisp a =>
    Foreign.Emacs.Internal.Emacs a
    -> Data.Either.Either
         (Foreign.Emacs.Internal.Emacs Data.AttoLisp.Lisp)
         Data.AttoLisp.Lisp
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><L,C(C1(U(U,U)))>m1,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dToLisp :: Data.AttoLisp.ToLisp a)
                   (eta :: Foreign.Emacs.Internal.Emacs a) ->
                 Data.Either.Left
                   @ (Foreign.Emacs.Internal.Emacs Data.AttoLisp.Lisp)
                   @ Data.AttoLisp.Lisp
                   (\ (eta1 :: (GHC.MVar.MVar Data.AttoLisp.Lisp,
                                Control.Concurrent.Chan.Chan
                                  Data.ByteString.Lazy.Internal.ByteString))
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case (eta
                            `cast`
                          (Trans
                               (Foreign.Emacs.Internal.N:Emacs[0] <a>_N)
                               (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <(GHC.MVar.MVar Data.AttoLisp.Lisp,
                                      Control.Concurrent.Chan.Chan
                                        Data.ByteString.Lazy.Internal.ByteString)>_R
                                    <GHC.Types.IO>_R
                                    <a>_N))
                            eta1)
                           `cast`
                         (GHC.Types.N:IO[0] <a>_R)
                           eta2 of ds { (#,#) ipv ipv1 ->
                    (# ipv,
                       $dToLisp `cast` (Data.AttoLisp.N:ToLisp[0] <a>_N) ipv1 #) })
                     `cast`
                   (Trans
                        (<(GHC.MVar.MVar Data.AttoLisp.Lisp,
                           Control.Concurrent.Chan.Chan
                             Data.ByteString.Lazy.Internal.ByteString)>_R
                         ->_R Sym (GHC.Types.N:IO[0] <Data.AttoLisp.Lisp>_R))
                        (Trans
                             (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                       <*>_N
                                       <(GHC.MVar.MVar Data.AttoLisp.Lisp,
                                         Control.Concurrent.Chan.Chan
                                           Data.ByteString.Lazy.Internal.ByteString)>_R
                                       <GHC.Types.IO>_R
                                       <Data.AttoLisp.Lisp>_N))
                             (Sym (Foreign.Emacs.Internal.N:Emacs[0]) <Data.AttoLisp.Lisp>_N)))) -}
9c943bae31741ab1c4437e85fa07e099
  $fToEmacsa ::
    Data.AttoLisp.ToLisp a => Foreign.Emacs.Internal.ToEmacs a
  DFunId
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><L,U>m2,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Foreign.Emacs.Internal.$fToEmacsa_$ctoEmacs
                  `cast`
                (forall (a :: <*>_N).
                 <Data.AttoLisp.ToLisp a>_R
                 ->_R Sym (Foreign.Emacs.Internal.N:ToEmacs[0] <a>_N)) -}
d777158af714f45ca9f549c5425b24cb
  $fToEmacsa_$ctoEmacs ::
    Data.AttoLisp.ToLisp a =>
    a
    -> Data.Either.Either
         (Foreign.Emacs.Internal.Emacs Data.AttoLisp.Lisp)
         Data.AttoLisp.Lisp
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dToLisp :: Data.AttoLisp.ToLisp a) (eta :: a) ->
                 Data.Either.Right
                   @ (Foreign.Emacs.Internal.Emacs Data.AttoLisp.Lisp)
                   @ Data.AttoLisp.Lisp
                   ($dToLisp `cast` (Data.AttoLisp.N:ToLisp[0] <a>_N) eta)) -}
6774140a9a6a9d16c6dc71e557a9d7c8
  $tc'Buffer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5685693734197869968##
                   13475635406834144662##
                   Foreign.Emacs.Internal.$trModule
                   Foreign.Emacs.Internal.$tc'Buffer1) -}
79c720414884cf323d33d32be0ccfa86
  $tc'Buffer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Buffer"#) -}
65781b353a3df7c7f5f11461a9d3e32c
  $tc'C:ToEmacs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3241394067577846052##
                   13045450132202160711##
                   Foreign.Emacs.Internal.$trModule
                   Foreign.Emacs.Internal.$tc'C:ToEmacs1) -}
cf1473f11a0fc573929442aa122043bf
  $tc'C:ToEmacs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:ToEmacs"#) -}
057b2fe665cb48bf92845d920e739791
  $tc'EmacsInternal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2709802063202133397##
                   11716825511587448725##
                   Foreign.Emacs.Internal.$trModule
                   Foreign.Emacs.Internal.$tc'EmacsInternal1) -}
2051faea0e7765374ad2d21032030e8e
  $tc'EmacsInternal1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'EmacsInternal"#) -}
96c87b514661dae9f69dffcac7c66fcc
  $tcBuffer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12632357964019917758##
                   1731841658615849723##
                   Foreign.Emacs.Internal.$trModule
                   Foreign.Emacs.Internal.$tcBuffer1) -}
064aababdb2cf0c9981ba8b8fff3ab2e
  $tcBuffer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Buffer"#) -}
873ca68b887d3150c5abec600d281c0d
  $tcEmacs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11911181604850833337##
                   4184835071014616923##
                   Foreign.Emacs.Internal.$trModule
                   Foreign.Emacs.Internal.$tcEmacs1) -}
3d5fb8acc89770f54e7653a064ec06ea
  $tcEmacs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Emacs"#) -}
ed6acf8119ccfb316ad07b51bcee3ea6
  $tcToEmacs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1076149493543522751##
                   17923239577219140387##
                   Foreign.Emacs.Internal.$trModule
                   Foreign.Emacs.Internal.$tcToEmacs1) -}
7456350aa273ffa96a0f45398f60be76
  $tcToEmacs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ToEmacs"#) -}
c395bcdfcb5bfdc5f08f6d45dbe319fc
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Foreign.Emacs.Internal.$trModule2
                   Foreign.Emacs.Internal.$trModule1) -}
84a5f33950f0fd325ddbe2153e8a3c8b
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Foreign.Emacs.Internal"#) -}
77b405b882022fe95d378ff40c3eab37
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
eccfb981e80f3e95d566c4b614eb0b04
  $weval ::
    Data.AttoLisp.FromLisp a =>
    [Data.AttoLisp.Lisp] -> Foreign.Emacs.Internal.Emacs a
  {- Arity: 2, Strictness: <L,C(C1(C1(U)))><L,U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: Data.AttoLisp.FromLisp a)
                   (w1 :: [Data.AttoLisp.Lisp]) ->
                 let {
                   cmd :: Data.ByteString.Lazy.Internal.ByteString
                   = let {
                       x :: Data.ByteString.Lazy.Internal.ByteString
                       = Data.ByteString.Builder.toLazyByteString
                           (Data.AttoLisp.fromLispExpr
                              (Data.AttoLisp.List
                                 (GHC.Types.:
                                    @ Data.AttoLisp.Lisp
                                    Foreign.Emacs.Internal.eval12
                                    (GHC.Types.:
                                       @ Data.AttoLisp.Lisp
                                       Foreign.Emacs.Internal.eval10
                                       (GHC.Types.:
                                          @ Data.AttoLisp.Lisp
                                          (Data.AttoLisp.List
                                             (GHC.Types.:
                                                @ Data.AttoLisp.Lisp
                                                Foreign.Emacs.Internal.eval8
                                                (GHC.Types.:
                                                   @ Data.AttoLisp.Lisp
                                                   Foreign.Emacs.Internal.eval6
                                                   (GHC.Types.:
                                                      @ Data.AttoLisp.Lisp
                                                      (Data.AttoLisp.List
                                                         (GHC.Types.:
                                                            @ Data.AttoLisp.Lisp
                                                            Foreign.Emacs.Internal.eval4
                                                            (GHC.Types.:
                                                               @ Data.AttoLisp.Lisp
                                                               (Data.AttoLisp.List
                                                                  (GHC.Types.:
                                                                     @ Data.AttoLisp.Lisp
                                                                     Foreign.Emacs.Internal.eval2
                                                                     (GHC.Types.:
                                                                        @ Data.AttoLisp.Lisp
                                                                        (Data.AttoLisp.List w1)
                                                                        (GHC.Types.[]
                                                                           @ Data.AttoLisp.Lisp))))
                                                               (GHC.Types.[]
                                                                  @ Data.AttoLisp.Lisp))))
                                                      (GHC.Types.[] @ Data.AttoLisp.Lisp)))))
                                          (GHC.Types.[] @ Data.AttoLisp.Lisp))))))
                     } in
                     letrec {
                       go1 :: Data.ByteString.Lazy.Internal.ByteString
                              -> Data.ByteString.Lazy.Internal.ByteString
                         {- Arity: 1, Strictness: <S,1*U> -}
                       = \ (ds :: Data.ByteString.Lazy.Internal.ByteString) ->
                         case ds of wild {
                           Data.ByteString.Lazy.Internal.Empty -> x
                           Data.ByteString.Lazy.Internal.Chunk dt dt1 dt2 dt3 cs
                           -> Data.ByteString.Lazy.Internal.Chunk dt dt1 dt2 dt3 (go1 cs) }
                     } in
                     go1
                       (Data.ByteString.Builder.toLazyByteString
                          (Data.AttoLisp.fromLispExpr
                             (Data.AttoLisp.List
                                (GHC.Types.:
                                   @ Data.AttoLisp.Lisp
                                   (Data.AttoLisp.Number
                                      (case Data.ByteString.Lazy.UTF8.$wloop
                                              0#
                                              x of ww2 { DEFAULT ->
                                       case GHC.Integer.Type.smallInteger ww2 of x1 { DEFAULT ->
                                       Data.Attoparsec.Number.I x1 } }))
                                   (GHC.Types.[] @ Data.AttoLisp.Lisp)))))
                 } in
                 (\ (r1 :: (GHC.MVar.MVar Data.AttoLisp.Lisp,
                            Control.Concurrent.Chan.Chan
                              Data.ByteString.Lazy.Internal.ByteString))
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case r1 of wild { (,) mvar chan ->
                  case chan of ww { Control.Concurrent.Chan.Chan ww1 ww2 ->
                  case Control.Concurrent.Chan.$wwriteChan
                         @ Data.ByteString.Lazy.Internal.ByteString
                         ww1
                         ww2
                         cmd
                         s of ds1 { (#,#) ipv ipv1 ->
                  case mvar of wild1 { GHC.MVar.MVar mvar# ->
                  case GHC.Prim.takeMVar#
                         @ GHC.Prim.RealWorld
                         @ Data.AttoLisp.Lisp
                         mvar#
                         ipv of ds2 { (#,#) ipv2 ipv3 ->
                  case ipv3 of wild2 {
                    DEFAULT -> Foreign.Emacs.Internal.$wpoly_fail @ a ipv2
                    Data.AttoLisp.List ds
                    -> case ds of wild3 {
                         [] -> Foreign.Emacs.Internal.$wpoly_fail @ a ipv2
                         : a1 ds3
                         -> case (w `cast` (Data.AttoLisp.N:FromLisp[0] <a>_N) a1)
                                   `cast`
                                 (Data.AttoLisp.N:Parser[0] <a>_R)
                                   @ Data.AttoLisp.Result
                                   @ a
                                   (Data.AttoLisp.Error @ a)
                                   (Data.AttoLisp.Success @ a) of wild4 {
                              Data.AttoLisp.Error msg
                              -> case Foreign.Emacs.Internal.eval1 @ a msg
                                 ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                                 of {}
                              Data.AttoLisp.Success b -> (# ipv2, b #) } } } } } } } })
                   `cast`
                 (Trans
                      (<(GHC.MVar.MVar Data.AttoLisp.Lisp,
                         Control.Concurrent.Chan.Chan
                           Data.ByteString.Lazy.Internal.ByteString)>_R
                       ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                      (Trans
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <(GHC.MVar.MVar Data.AttoLisp.Lisp,
                                       Control.Concurrent.Chan.Chan
                                         Data.ByteString.Lazy.Internal.ByteString)>_R
                                     <GHC.Types.IO>_R
                                     <a>_N))
                           (Sym (Foreign.Emacs.Internal.N:Emacs[0]) <a>_N)))) -}
e534879729ac9b830f2f83783e94bde8
  $wpoly_fail ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 1, Strictness: <B,U>x, Inline: [0] -}
58afa07f71de96379ee9d22fa55c19c6
  $wputBuffer ::
    Data.Text.Internal.Text
    -> GHC.Types.Int -> Foreign.Emacs.Internal.Emacs ()
  {- Arity: 2, Strictness: <L,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Data.Text.Internal.Text)
                   (ww1 :: GHC.Types.Int) ->
                 Foreign.Emacs.Internal.eval_
                   (GHC.Types.:
                      @ Data.AttoLisp.Lisp
                      Foreign.Emacs.Internal.eval2
                      (GHC.Types.:
                         @ Data.AttoLisp.Lisp
                         Foreign.Emacs.Internal.modifyBuffer8
                         (GHC.Types.:
                            @ Data.AttoLisp.Lisp
                            (Data.AttoLisp.List
                               (GHC.Types.:
                                  @ Data.AttoLisp.Lisp
                                  Foreign.Emacs.Internal.modifyBuffer6
                                  (GHC.Types.:
                                     @ Data.AttoLisp.Lisp
                                     (Data.AttoLisp.String ww)
                                     (GHC.Types.[] @ Data.AttoLisp.Lisp))))
                            (GHC.Types.:
                               @ Data.AttoLisp.Lisp
                               (Data.AttoLisp.List
                                  (GHC.Types.:
                                     @ Data.AttoLisp.Lisp
                                     Foreign.Emacs.Internal.modifyBuffer4
                                     (GHC.Types.:
                                        @ Data.AttoLisp.Lisp
                                        (Data.AttoLisp.List
                                           (GHC.Types.:
                                              @ Data.AttoLisp.Lisp
                                              Foreign.Emacs.Internal.modifyBuffer2
                                              (GHC.Types.:
                                                 @ Data.AttoLisp.Lisp
                                                 (Data.AttoLisp.Number
                                                    (case ww1 of wild { GHC.Types.I# x ->
                                                     case GHC.Integer.Type.smallInteger
                                                            (GHC.Prim.-# x 1#) of x1 { DEFAULT ->
                                                     Data.Attoparsec.Number.I x1 } }))
                                                 Foreign.Emacs.Internal.getBuffer6)))
                                        (GHC.Types.[] @ Data.AttoLisp.Lisp))))
                               (GHC.Types.[] @ Data.AttoLisp.Lisp)))))) -}
69985ea0f99969f3a695959894b26a3c
  data Buffer
    = Buffer {text :: Data.Text.Internal.Text, point :: GHC.Types.Int}
3ea21ebf8898c3f9d10265d33d055302
  type role Emacs nominal
  newtype Emacs a
    = EmacsInternal {fromEmacs :: Control.Monad.Trans.Reader.ReaderT
                                    (GHC.MVar.MVar Data.AttoLisp.Lisp,
                                     Control.Concurrent.Chan.Chan
                                       Data.ByteString.Lazy.Internal.ByteString)
                                    GHC.Types.IO
                                    a}
9c943bae31741ab1c4437e85fa07e099
  class ToEmacs a where
    toEmacs :: a
               -> Data.Either.Either
                    (Foreign.Emacs.Internal.Emacs Data.AttoLisp.Lisp)
                    Data.AttoLisp.Lisp
    {-# MINIMAL toEmacs #-}
96d04737727061c93090b4402c97f2b5
  eval ::
    (Data.AttoLisp.ToLisp a, Data.AttoLisp.FromLisp a) =>
    [Data.AttoLisp.Lisp] -> Foreign.Emacs.Internal.Emacs a
  {- Arity: 3, Strictness: <L,A><L,C(C1(C1(U)))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: Data.AttoLisp.ToLisp a)
                   (w1 :: Data.AttoLisp.FromLisp a)
                   (w2 :: [Data.AttoLisp.Lisp]) ->
                 Foreign.Emacs.Internal.$weval @ a w1 w2) -}
9307d2ed81944ca7ccc15b2a522c9781
  eval1 ::
    GHC.Base.String
    -> Control.Monad.Trans.Reader.ReaderT
         (GHC.MVar.MVar Data.AttoLisp.Lisp,
          Control.Concurrent.Chan.Chan
            Data.ByteString.Lazy.Internal.ByteString)
         GHC.Types.IO
         a
  {- Arity: 1, Strictness: <L,U>x -}
112974f89ce3d31b6aaf941a5f08ee56
  eval10 :: Data.AttoLisp.Lisp
  {- Strictness: m1,
     Unfolding: (Data.AttoLisp.Symbol Foreign.Emacs.Internal.eval11) -}
35c019e9df93256ffb60786b6b0279b8
  eval11 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "haskell-emacs--proc"#) -}
d3ab704de8a17f581c1ec838bdf2ba82
  eval12 :: Data.AttoLisp.Lisp
  {- Strictness: m1,
     Unfolding: (Data.AttoLisp.Symbol Foreign.Emacs.Internal.eval13) -}
61a23518289588fbcce1bf881064beed
  eval13 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "process-send-string"#) -}
9bf3f1df70b7cfc8b94d01687d91b545
  eval2 :: Data.AttoLisp.Lisp
  {- Strictness: m1,
     Unfolding: (Data.AttoLisp.Symbol Foreign.Emacs.Internal.eval3) -}
5ec69de38fb8f9ccbc3472d40a66db60
  eval3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "list"#) -}
0664bcadd489775947f91f4e461e1c43
  eval4 :: Data.AttoLisp.Lisp
  {- Strictness: m1,
     Unfolding: (Data.AttoLisp.Symbol Foreign.Emacs.Internal.eval5) -}
895ceee9b690d67ffc86cde080174fdd
  eval5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "haskell-emacs--no-properties"#) -}
b4859a6bab4ea003e1ed8be0ae3e0f65
  eval6 :: Data.AttoLisp.Lisp
  {- Strictness: m2,
     Unfolding: (Data.AttoLisp.String Foreign.Emacs.Internal.eval7) -}
3a3dcfe39a7420800d3b904ebd4d5969
  eval7 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "|%S"#) -}
cf163db96823ff03d06eb475e2bb23fe
  eval8 :: Data.AttoLisp.Lisp
  {- Strictness: m1,
     Unfolding: (Data.AttoLisp.Symbol Foreign.Emacs.Internal.eval9) -}
9f774f45439dafdcc8c464a93e170fec
  eval9 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "format"#) -}
9b66c99634e829d955eef15da94aa894
  eval_ :: [Data.AttoLisp.Lisp] -> Foreign.Emacs.Internal.Emacs ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (lsp :: [Data.AttoLisp.Lisp]) ->
                 let {
                   cmd :: Data.ByteString.Lazy.Internal.ByteString
                   = let {
                       x :: Data.ByteString.Lazy.Internal.ByteString
                       = Data.ByteString.Builder.toLazyByteString
                           (Data.AttoLisp.fromLispExpr (Data.AttoLisp.List lsp))
                     } in
                     letrec {
                       go1 :: Data.ByteString.Lazy.Internal.ByteString
                              -> Data.ByteString.Lazy.Internal.ByteString
                         {- Arity: 1, Strictness: <S,1*U> -}
                       = \ (ds :: Data.ByteString.Lazy.Internal.ByteString) ->
                         case ds of wild {
                           Data.ByteString.Lazy.Internal.Empty -> x
                           Data.ByteString.Lazy.Internal.Chunk dt dt1 dt2 dt3 cs
                           -> Data.ByteString.Lazy.Internal.Chunk dt dt1 dt2 dt3 (go1 cs) }
                     } in
                     go1
                       (Data.ByteString.Builder.toLazyByteString
                          (Data.AttoLisp.fromLispExpr
                             (Data.AttoLisp.List
                                (GHC.Types.:
                                   @ Data.AttoLisp.Lisp
                                   (Data.AttoLisp.Number
                                      (case Data.ByteString.Lazy.UTF8.$wloop
                                              0#
                                              x of ww2 { DEFAULT ->
                                       case GHC.Integer.Type.smallInteger ww2 of x1 { DEFAULT ->
                                       Data.Attoparsec.Number.I x1 } }))
                                   (GHC.Types.[] @ Data.AttoLisp.Lisp)))))
                 } in
                 (\ (r1 :: (GHC.MVar.MVar Data.AttoLisp.Lisp,
                            Control.Concurrent.Chan.Chan
                              Data.ByteString.Lazy.Internal.ByteString))
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                  case r1 of wild { (,) ds chan ->
                  Control.Concurrent.Chan.writeChan1
                    @ Data.ByteString.Lazy.Internal.ByteString
                    chan
                    cmd
                    s })
                   `cast`
                 (Trans
                      (<(GHC.MVar.MVar Data.AttoLisp.Lisp,
                         Control.Concurrent.Chan.Chan
                           Data.ByteString.Lazy.Internal.ByteString)>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                      (Trans
                           (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                     <*>_N
                                     <(GHC.MVar.MVar Data.AttoLisp.Lisp,
                                       Control.Concurrent.Chan.Chan
                                         Data.ByteString.Lazy.Internal.ByteString)>_R
                                     <GHC.Types.IO>_R
                                     <()>_N))
                           (Sym (Foreign.Emacs.Internal.N:Emacs[0]) <()>_N)))) -}
90925037148406554a06cf5921da5230
  eval_$seval ::
    [Data.AttoLisp.Lisp]
    -> Foreign.Emacs.Internal.Emacs
         (Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <L,U> -}
b729857de0841b30561b9ddc7b0fa7a7
  fromEmacs ::
    Foreign.Emacs.Internal.Emacs a
    -> Control.Monad.Trans.Reader.ReaderT
         (GHC.MVar.MVar Data.AttoLisp.Lisp,
          Control.Concurrent.Chan.Chan
            Data.ByteString.Lazy.Internal.ByteString)
         GHC.Types.IO
         a
  RecSel Left Foreign.Emacs.Internal.Emacs
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Foreign.Emacs.Internal.fromEmacs1
                  `cast`
                (forall (a :: <*>_N).
                 <Foreign.Emacs.Internal.Emacs a>_R
                 ->_R Foreign.Emacs.Internal.N:Emacs[0] <a>_N) -}
ff78c328a097f492d8de70f5a3df4aec
  fromEmacs1 ::
    Foreign.Emacs.Internal.Emacs a -> Foreign.Emacs.Internal.Emacs a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: Foreign.Emacs.Internal.Emacs a) -> ds) -}
dab02671e278f27f5ca2901c8437b0ca
  getBuffer ::
    Foreign.Emacs.Internal.Emacs Foreign.Emacs.Internal.Buffer
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Foreign.Emacs.Internal.getBuffer1
                  `cast`
                (Trans
                     (<(GHC.MVar.MVar Data.AttoLisp.Lisp,
                        Control.Concurrent.Chan.Chan
                          Data.ByteString.Lazy.Internal.ByteString)>_R
                      ->_R Sym (GHC.Types.N:IO[0] <Foreign.Emacs.Internal.Buffer>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N
                                    <(GHC.MVar.MVar Data.AttoLisp.Lisp,
                                      Control.Concurrent.Chan.Chan
                                        Data.ByteString.Lazy.Internal.ByteString)>_R
                                    <GHC.Types.IO>_R
                                    <Foreign.Emacs.Internal.Buffer>_N))
                          (Sym (Foreign.Emacs.Internal.N:Emacs[0]) <Foreign.Emacs.Internal.Buffer>_N))) -}
3b3cbae34cc1a9d2dbb0d6840b3944ef
  getBuffer1 ::
    (GHC.MVar.MVar Data.AttoLisp.Lisp,
     Control.Concurrent.Chan.Chan
       Data.ByteString.Lazy.Internal.ByteString)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Foreign.Emacs.Internal.Buffer #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (r1 :: (GHC.MVar.MVar Data.AttoLisp.Lisp,
                           Control.Concurrent.Chan.Chan
                             Data.ByteString.Lazy.Internal.ByteString))
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case (Foreign.Emacs.Internal.getBuffer2
                         `cast`
                       (Trans
                            (Foreign.Emacs.Internal.N:Emacs[0] <(Data.Text.Internal.Text,
                                                                 GHC.Types.Int, GHC.Types.Int)>_N)
                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <(GHC.MVar.MVar Data.AttoLisp.Lisp,
                                   Control.Concurrent.Chan.Chan
                                     Data.ByteString.Lazy.Internal.ByteString)>_R
                                 <GHC.Types.IO>_R
                                 <(Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int)>_N))
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int)>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,,) t p pm ->
                 (# ipv,
                    Foreign.Emacs.Internal.Buffer
                      t
                      (case p of wild1 { GHC.Types.I# x ->
                       case pm of wild2 { GHC.Types.I# y ->
                       GHC.Types.I# (GHC.Prim.+# (GHC.Prim.-# x y) 1#) } }) #) } }) -}
7e7497c3f4b7239e15ab4c1e8f99e451
  getBuffer10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "point-min"#) -}
8f28f55a45684666091f93869b9aa9ae
  getBuffer11 :: Data.AttoLisp.Lisp
  {- Unfolding: (Data.AttoLisp.List
                   Foreign.Emacs.Internal.getBuffer12) -}
48605544505d7d3dcadd125d1cda328a
  getBuffer12 :: [Data.AttoLisp.Lisp]
  {- Unfolding: (GHC.Types.:
                   @ Data.AttoLisp.Lisp
                   Foreign.Emacs.Internal.getBuffer13
                   (GHC.Types.[] @ Data.AttoLisp.Lisp)) -}
6bbfdd9bbd02fedf675ad673a355194b
  getBuffer13 :: Data.AttoLisp.Lisp
  {- Unfolding: (Data.AttoLisp.Symbol
                   Foreign.Emacs.Internal.getBuffer14) -}
9f819e694b712df1c4dad5942ad317e9
  getBuffer14 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "point"#) -}
079d610cf2b0efeba1e1240f186065e6
  getBuffer15 :: Data.AttoLisp.Lisp
  {- Unfolding: (Data.AttoLisp.List
                   Foreign.Emacs.Internal.getBuffer16) -}
bf5645f7e631cc613904b6839fd36d76
  getBuffer16 :: [Data.AttoLisp.Lisp]
  {- Unfolding: (GHC.Types.:
                   @ Data.AttoLisp.Lisp
                   Foreign.Emacs.Internal.getBuffer17
                   (GHC.Types.[] @ Data.AttoLisp.Lisp)) -}
f8fb0f491f0a3ce75e8298966f05a15b
  getBuffer17 :: Data.AttoLisp.Lisp
  {- Unfolding: (Data.AttoLisp.Symbol
                   Foreign.Emacs.Internal.getBuffer18) -}
a275a54e115dda947b39ffe4cec42eae
  getBuffer18 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "buffer-string"#) -}
aceb096cd033bb8cc474497746ee69e6
  getBuffer2 ::
    Foreign.Emacs.Internal.Emacs
      (Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int)
  {- Unfolding: (Foreign.Emacs.Internal.eval_$seval
                   Foreign.Emacs.Internal.getBuffer3) -}
449b1f0193a5538b5e5502dffd0de45e
  getBuffer3 :: [Data.AttoLisp.Lisp]
  {- Unfolding: (GHC.Types.:
                   @ Data.AttoLisp.Lisp
                   Foreign.Emacs.Internal.eval2
                   Foreign.Emacs.Internal.getBuffer4) -}
91b10253b863cf0cafed258fc1a7cd7e
  getBuffer4 :: [Data.AttoLisp.Lisp]
  {- Unfolding: (GHC.Types.:
                   @ Data.AttoLisp.Lisp
                   Foreign.Emacs.Internal.getBuffer15
                   Foreign.Emacs.Internal.getBuffer5) -}
0a6b8e7ad8909ce5dba226abf48ca235
  getBuffer5 :: [Data.AttoLisp.Lisp]
  {- Unfolding: (GHC.Types.:
                   @ Data.AttoLisp.Lisp
                   Foreign.Emacs.Internal.getBuffer11
                   Foreign.Emacs.Internal.getBuffer6) -}
bc635ae8c02b2acce450e117b145bbea
  getBuffer6 :: [Data.AttoLisp.Lisp]
  {- Unfolding: (GHC.Types.:
                   @ Data.AttoLisp.Lisp
                   Foreign.Emacs.Internal.getBuffer7
                   (GHC.Types.[] @ Data.AttoLisp.Lisp)) -}
e018e888ea0a97ba70e1d60306988719
  getBuffer7 :: Data.AttoLisp.Lisp
  {- Strictness: m4,
     Unfolding: (Data.AttoLisp.List
                   Foreign.Emacs.Internal.getBuffer8) -}
8d124f46f98f1d856d3ab17cc64abbc2
  getBuffer8 :: [Data.AttoLisp.Lisp]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.AttoLisp.Lisp
                   Foreign.Emacs.Internal.getBuffer9
                   (GHC.Types.[] @ Data.AttoLisp.Lisp)) -}
818a67bba3aa51e50740890722768efb
  getBuffer9 :: Data.AttoLisp.Lisp
  {- Strictness: m1,
     Unfolding: (Data.AttoLisp.Symbol
                   Foreign.Emacs.Internal.getBuffer10) -}
606c2fd2b5b57d96b26186cd1a1e96d1
  modifyBuffer ::
    (Foreign.Emacs.Internal.Buffer -> Foreign.Emacs.Internal.Buffer)
    -> Foreign.Emacs.Internal.Emacs ()
  {- Arity: 3, Strictness: <L,1*C1(U(U,1*U(U)))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Foreign.Emacs.Internal.modifyBuffer1
                  `cast`
                (<Foreign.Emacs.Internal.Buffer -> Foreign.Emacs.Internal.Buffer>_R
                 ->_R Trans
                          (<(GHC.MVar.MVar Data.AttoLisp.Lisp,
                             Control.Concurrent.Chan.Chan
                               Data.ByteString.Lazy.Internal.ByteString)>_R
                           ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <(GHC.MVar.MVar Data.AttoLisp.Lisp,
                                           Control.Concurrent.Chan.Chan
                                             Data.ByteString.Lazy.Internal.ByteString)>_R
                                         <GHC.Types.IO>_R
                                         <()>_N))
                               (Sym (Foreign.Emacs.Internal.N:Emacs[0]) <()>_N))) -}
b81300a10b0fcd8678d2e1d65385f303
  modifyBuffer1 ::
    (Foreign.Emacs.Internal.Buffer -> Foreign.Emacs.Internal.Buffer)
    -> (GHC.MVar.MVar Data.AttoLisp.Lisp,
        Control.Concurrent.Chan.Chan
          Data.ByteString.Lazy.Internal.ByteString)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,1*C1(U(U,1*U(U)))><L,U><S,U>,
     Unfolding: (\ (f :: Foreign.Emacs.Internal.Buffer
                         -> Foreign.Emacs.Internal.Buffer)
                   (eta :: (GHC.MVar.MVar Data.AttoLisp.Lisp,
                            Control.Concurrent.Chan.Chan
                              Data.ByteString.Lazy.Internal.ByteString))
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case (Foreign.Emacs.Internal.getBuffer2
                         `cast`
                       (Trans
                            (Foreign.Emacs.Internal.N:Emacs[0] <(Data.Text.Internal.Text,
                                                                 GHC.Types.Int, GHC.Types.Int)>_N)
                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <(GHC.MVar.MVar Data.AttoLisp.Lisp,
                                   Control.Concurrent.Chan.Chan
                                     Data.ByteString.Lazy.Internal.ByteString)>_R
                                 <GHC.Types.IO>_R
                                 <(Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int)>_N))
                         eta)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(Data.Text.Internal.Text, GHC.Types.Int, GHC.Types.Int)>_R)
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,,) t p pm ->
                 case f (Foreign.Emacs.Internal.Buffer
                           t
                           (case p of wild1 { GHC.Types.I# x ->
                            case pm of wild2 { GHC.Types.I# y ->
                            GHC.Types.I#
                              (GHC.Prim.+#
                                 (GHC.Prim.-# x y)
                                 1#) } })) of ww { Foreign.Emacs.Internal.Buffer ww1 ww2 ->
                 ((Foreign.Emacs.Internal.$wputBuffer ww1 ww2)
                    `cast`
                  (Trans
                       (Foreign.Emacs.Internal.N:Emacs[0] <()>_N)
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <(GHC.MVar.MVar Data.AttoLisp.Lisp,
                              Control.Concurrent.Chan.Chan
                                Data.ByteString.Lazy.Internal.ByteString)>_R
                            <GHC.Types.IO>_R
                            <()>_N))
                    eta)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   ipv } } }) -}
ca5a383771b6128396c8475360acf5dd
  modifyBuffer10 :: [Data.AttoLisp.Lisp]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.AttoLisp.Lisp
                   Foreign.Emacs.Internal.getBuffer7
                   Foreign.Emacs.Internal.modifyBuffer11) -}
204bc679a863e8c661f6f80f655b9193
  modifyBuffer11 :: [Data.AttoLisp.Lisp]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.AttoLisp.Lisp
                   Foreign.Emacs.Internal.modifyBuffer12
                   (GHC.Types.[] @ Data.AttoLisp.Lisp)) -}
463a6a9fb048d1c1355ba1c7f82bafe2
  modifyBuffer12 :: Data.AttoLisp.Lisp
  {- Strictness: m4,
     Unfolding: (Data.AttoLisp.List
                   Foreign.Emacs.Internal.modifyBuffer13) -}
fda073263a54d404972185ae26ca2a1d
  modifyBuffer13 :: [Data.AttoLisp.Lisp]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.AttoLisp.Lisp
                   Foreign.Emacs.Internal.modifyBuffer14
                   (GHC.Types.[] @ Data.AttoLisp.Lisp)) -}
a3171a07ecc7a77e5d23f24499870719
  modifyBuffer14 :: Data.AttoLisp.Lisp
  {- Strictness: m1,
     Unfolding: (Data.AttoLisp.Symbol
                   Foreign.Emacs.Internal.modifyBuffer15) -}
939cfc49cf3f1999aa310a6262b36c91
  modifyBuffer15 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "point-max"#) -}
41cae5fd14e0570fce480be766ef14bb
  modifyBuffer16 :: Data.AttoLisp.Lisp
  {- Strictness: m1,
     Unfolding: (Data.AttoLisp.Symbol
                   Foreign.Emacs.Internal.modifyBuffer17) -}
a958ec8566ca08d74d264211ca4efe65
  modifyBuffer17 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "delete-region"#) -}
3c8a5e51f985860fca4739ef98f7892d
  modifyBuffer2 :: Data.AttoLisp.Lisp
  {- Strictness: m1,
     Unfolding: (Data.AttoLisp.Symbol
                   Foreign.Emacs.Internal.modifyBuffer3) -}
9674c637a47039331c5feab5cf9c912d
  modifyBuffer3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "+"#) -}
441423703aeaf6250f0577bfa418e62e
  modifyBuffer4 :: Data.AttoLisp.Lisp
  {- Strictness: m1,
     Unfolding: (Data.AttoLisp.Symbol
                   Foreign.Emacs.Internal.modifyBuffer5) -}
5d8f3cf3bc94ad94627974c8eaf25dbf
  modifyBuffer5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "goto-char"#) -}
dd89bd3b03d03f41b5ac6be56bf8ab24
  modifyBuffer6 :: Data.AttoLisp.Lisp
  {- Strictness: m1,
     Unfolding: (Data.AttoLisp.Symbol
                   Foreign.Emacs.Internal.modifyBuffer7) -}
40c3af0f460ee82e39d87dab036974aa
  modifyBuffer7 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "insert"#) -}
8bc6370167412a2a03b235b5e4dafd5f
  modifyBuffer8 :: Data.AttoLisp.Lisp
  {- Strictness: m4,
     Unfolding: (Data.AttoLisp.List
                   Foreign.Emacs.Internal.modifyBuffer9) -}
5a3a3c4b850960d6e4c75b80b28aa401
  modifyBuffer9 :: [Data.AttoLisp.Lisp]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.AttoLisp.Lisp
                   Foreign.Emacs.Internal.modifyBuffer16
                   Foreign.Emacs.Internal.modifyBuffer10) -}
317074f8b40c4a71b7b667f31892b789
  point :: Foreign.Emacs.Internal.Buffer -> GHC.Types.Int
  RecSel Left Foreign.Emacs.Internal.Buffer
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Foreign.Emacs.Internal.Buffer) ->
                 case ds of wild { Foreign.Emacs.Internal.Buffer ds1 ds2 ->
                 ds2 }) -}
2defd2050de422ab9f911cbaf924ee83
  putBuffer ::
    Foreign.Emacs.Internal.Buffer -> Foreign.Emacs.Internal.Emacs ()
  {- Arity: 1, Strictness: <S,1*U(U,1*U(U))>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Foreign.Emacs.Internal.Buffer) ->
                 case w of ww { Foreign.Emacs.Internal.Buffer ww1 ww2 ->
                 Foreign.Emacs.Internal.$wputBuffer ww1 ww2 }) -}
9bd2a2e524c2583c1024c81e255ef272
  text :: Foreign.Emacs.Internal.Buffer -> Data.Text.Internal.Text
  RecSel Left Foreign.Emacs.Internal.Buffer
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Foreign.Emacs.Internal.Buffer) ->
                 case ds of wild { Foreign.Emacs.Internal.Buffer ds1 ds2 ->
                 ds1 }) -}
instance GHC.Base.Applicative [Foreign.Emacs.Internal.Emacs]
  = Foreign.Emacs.Internal.$fApplicativeEmacs
instance GHC.Base.Functor [Foreign.Emacs.Internal.Emacs]
  = Foreign.Emacs.Internal.$fFunctorEmacs
instance GHC.Base.Monad [Foreign.Emacs.Internal.Emacs]
  = Foreign.Emacs.Internal.$fMonadEmacs
instance Control.Monad.IO.Class.MonadIO [Foreign.Emacs.Internal.Emacs]
  = Foreign.Emacs.Internal.$fMonadIOEmacs
instance Control.DeepSeq.NFData [Foreign.Emacs.Internal.Emacs]
  = Foreign.Emacs.Internal.$fNFDataEmacs
instance [overlap ok] Foreign.Emacs.Internal.ToEmacs [Foreign.Emacs.Internal.Emacs]
  = Foreign.Emacs.Internal.$fToEmacsEmacs
instance Foreign.Emacs.Internal.ToEmacs [.]
  = Foreign.Emacs.Internal.$fToEmacsa
"SPEC eval @ (Text, Int, Int)" [ALWAYS] forall ($dToLisp :: Data.AttoLisp.ToLisp
                                                              (Data.Text.Internal.Text,
                                                               GHC.Types.Int, GHC.Types.Int))
                                               ($dFromLisp :: Data.AttoLisp.FromLisp
                                                                (Data.Text.Internal.Text,
                                                                 GHC.Types.Int, GHC.Types.Int))
  Foreign.Emacs.Internal.eval @ (Data.Text.Internal.Text,
                                 GHC.Types.Int, GHC.Types.Int)
                              $dToLisp
                              $dFromLisp
  = Foreign.Emacs.Internal.eval_$seval
"SPEC/Foreign.Emacs.Internal $fApplicativeReaderT_$c<*> @ IO _" [ALWAYS] forall @ r
                                                                                ($dApplicative :: GHC.Base.Applicative
                                                                                                    GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*> @ GHC.Types.IO
                                                        @ r
                                                        $dApplicative
  = Foreign.Emacs.Internal.$fApplicativeEmacs_$s$fApplicativeReaderT_$c<*>
      @ r
"SPEC/Foreign.Emacs.Internal $fFunctorReaderT_$cfmap @ IO _" [ALWAYS] forall @ r
                                                                             ($dFunctor :: GHC.Base.Functor
                                                                                             GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT_$cfmap @ GHC.Types.IO
                                                     @ r
                                                     $dFunctor
  = Foreign.Emacs.Internal.$fFunctorEmacs_$s$fFunctorReaderT_$cfmap
      @ r
"SPEC/Foreign.Emacs.Internal $fMonadReaderT_$c>> @ IO _" [ALWAYS] forall @ r
                                                                         ($dMonad :: GHC.Base.Monad
                                                                                       GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>> @ GHC.Types.IO
                                                 @ r
                                                 $dMonad
  = Foreign.Emacs.Internal.$fMonadEmacs_$s$fMonadReaderT_$c>> @ r
"SPEC/Foreign.Emacs.Internal $fMonadReaderT_$c>>= @ IO _" [ALWAYS] forall @ r
                                                                          ($dMonad :: GHC.Base.Monad
                                                                                        GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>>= @ GHC.Types.IO
                                                  @ r
                                                  $dMonad
  = Foreign.Emacs.Internal.$fMonadEmacs_$s$fMonadReaderT_$c>>= @ r
"SPEC/Foreign.Emacs.Internal $fMonadReaderT_$cfail @ IO _" [ALWAYS] forall @ r
                                                                           ($dMonad :: GHC.Base.Monad
                                                                                         GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$cfail @ GHC.Types.IO
                                                   @ r
                                                   $dMonad
  = Foreign.Emacs.Internal.$fMonadEmacs_$s$fMonadReaderT_$cfail @ r
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

